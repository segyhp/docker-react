{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","idx","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","nextProp","ErrorBoundry","hasError","error","info","App","onRequestRobots","searchField","onSeachChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","pending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e7f38262.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// const Card = (props) => {\n    const Card = ({name, email, id}) => {\n\n    //using destructuring\n    // const  {name, email, id} = props;\n    return (\n        <div className='tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\n            <h1>Robot Card</h1>\n            <img alt='robots' src= {`https://robohash.org/${id}?200x20`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n} \n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    console.log(\"Cardlist\");\n    // const cardsArray = robots.map((user, idx) => {\n    //     return (<Card \n    //     key={idx} \n    //     id={user.id} \n    //     name={user.name} \n    //     email={user.email} \n    //     />);\n    // });\n\n   return(\n       <div>\n           {\n               robots.map((user, idx) => {\n                   return(\n                       <Card\n                            key={idx}\n                            id={user.id} \n                            name={user.name} \n                            email={user.email} \n                        />\n                   )\n               })\n           }\n       </div>\n   );\n   \n    // return (\n    // <div>\n    //     {cardsArray}\n    // </div> \n    // );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    console.log(\"Searchbox\");\n    return (\n        <div className='pa2'>\n            <input\n            type=\"search\"\n            placeholder=\"Search robots\"\n            className=\"pa3 ba b--green bg-lightest-blue\"\n            onChange={searchChange}\n            >\n            </input>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll =  (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n    updateCount =  () => {\n        this.setState(state => {\n            return {count: this.state.count  + 1};\n        });\n    }\n\n\n    render() {\n        console.log(\"Couter button\");\n\n        return(\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, {Component} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\n    //lifecycle if return false, dont rerender anything\n    shouldComponentUpdate(nextProp, nextState){\n        return false;\n    }\n\n    render() {\n        console.log(\"Header\");\n        return (\n            <div>\n                <h1 className='f2'>Robo Friends</h1>\n                <CounterButton color={'blue'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Oop.. Something wrong</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport  {setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.pending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n       onSeachChange: (event) => dispatch(setSearchField(event.target.value)),\n       onRequestRobots: () => dispatch(requestRobots())\n   }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const  { searchField, onSeachChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        if (isPending) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox \n                        searchChange={onSeachChange} \n                        searchField = {searchField}\n                    />\n                    <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                    </Scroll> \n                </div>\n            );\n        }\n    \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateRobots = {\n    isPending : false,\n    robots: [],\n    error: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n      case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload});\n       default:\n           return state;\n  }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false});\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport  {searchRobots, requestRobots }from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); //disable logger\n\n\nReactDOM.render(\n        <Provider store={store}>\n        <App />\n        </Provider>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}